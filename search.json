[{"title":"VS Code 使用入门","url":"https://blog.ccandle.top/2021/02/17/vscode/","content":"简介VS： Visual Studio Code（以下简称VS Code）是微软公司开发的、面向广大程序员的强大的跨平台源代码编辑器。VS Code： Visual Studio（VS）是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等。但是对于初学者来说，vs虽然上手就能用，却容易使得我们过于依赖这一强大的IDE，可能会导致我们缺少一些比较底层但是比较重要的知识。另外，vs作为一个完备的开发环境，她也是比较臃肿的，不太符合本人简洁至上的习惯（手动滑稽( •̀ ω •́ )✧基于此，这里我们选择VSCode进行使用。\n为什么要用VS Code自从vs面世之后，她就被冠以了地表最强IDE的名号。这不仅仅是由于她完备的代码开发、调试、管理功能，更是因为她专门为提高编程速度而进行的一系列调整优化。这其中，强大的自动补全功能以及各种功能人性化的快捷键，对提升编程速度，改善编程体验起到了至关重要的作用。VSCode则是微软延续了VS的优点，而推出的一款源代码编辑器。除了VS的优点之外，她还：\n\n支持了Linux，在跨平台上迈出了一大步；\n更为轻量化，更加方便实用，在任何平台上快速配置环境都更加方便；\n独特的插件系统，使得VS Code的功能扩展有了无限的可能性；\n\n安装不论是VS抑或是vscode，在Visual Studio官方网站上都有个人免费版本提供下载。下面介绍VS Code的安装。  \n\n\n下载VS Code最新版(2020-11-24)\n同意使用政策后，看到如下界面，将所有复选框选中\n\n\n\n然后就可以愉快的无脑下一步了~~\n\n\n开发环境基础配置正如上文所述，VS Code属于一种源代码编辑器，说白了本质上就是一种看起来很NB高级的Notepad。要想使得VS Code能够实现VS的大部分功能，需要根据语言进行一系列环境配置。下面，我将以python为例，从插件、文件夹设置、settings.json两个方面简述如何配置一套顺手的python开发环境。\n*[源代码编辑器]: 即只提供文本编辑功能，不提供编译、运行、调试等功能\n插件\nVS Code的功能扩展是以插件的形式体现的，这使得她的功能灵活而多样。*\n\n通常，我们配置python的编程环境，需要：\n\n\n从官网下载python39，并执行安装；\n在VS Code左侧第五个选项卡(扩展)中，搜索：python，并点击第一个选项：\n\n\n\n通常，搜索某种语言（类似python、C++），第一个扩展会是Microsoft官方开发的插件\n\n\n\n我们点击安装按钮安装即可\n\n\n文件夹设置\n我们电气专业未来将要接触控制方向的软件设计，从刚接触编程开始就养成一个良好的文件管理习惯是十分有必要的。*  \n\n下面我们通过VS Code内置终端进行文件夹的基本设置\n\n\n在VS Code内按下Ctrl+`来打开VS Code内置终端；\n在终端内输入cd d:\\来进入D盘根目录；\n输入mkdir Workspace在当前目录下创建Workspace文件夹（这将成为我们日后的工作空间）；\ncd .\\Workspace\\进入该文件夹；这里讲一个小技巧：键入cd .\\wor之后，直接按下键盘上的Tab键，就可以自动补全目录了\n按照上面的步骤，继续在Workspace下建立python文件夹，并在python文件夹内部建立helloworld文件夹，并进入该文件夹；\ncode .\\在vscode中打开该目录；\n至此，基础的文件夹设置就完成了。\n\n\n注：\n\n上述操作命令在cmd中也是适用的，其中各个命令的含义是：\n\n\ncd somedir 进入某个文件夹；\nmkdir somedir 新建一个文件夹；\n.\\ . 代表当前目录；相对应的，..\\代表上一级目录\n\n\n上述建立文件夹的操作可以在我们熟悉的资源管理器内完成，但是熟悉终端操作可以大大节省时间，提高工作效率。\n我们按照 “工作空间-&gt;语言-&gt;项目” 的顺序构建了文件夹，但这只是我的个人习惯，你也可以根据你自己的习惯构建文件系统；\n\nsettings.json设置\nvscode自定义化的程度很高，一般设置可以通过两种方式进行设置：设置界面、settings.json文件。本教程将简单介绍如何通过settings.json进行设置*VS Code规定了settings.json文件的路径： .\\.vscode\\settings.json ，即VS Code打开的文件目录下 .vscode 文件夹中。json的标准格式是：\n\n&#123; \n    \"keyA\": \"valueA\",  \n    \"keyB\": \"valueB\"\n&#125;\n我们作为初学者，了解一些简单的配置参数即可。这里贴出一个简单的例子：\n&#123;\n    \"files.defaultLanguage\": \"python\",  // 设置新建文件的默认语言为python\n    \"editor.formatOnSave\": true,        // 在保存时自动将文档格式化\n    \"editor.tabSize\": 4                 // 按下Tab键时缩进空格数（此参数默认为4，python下可以不用设置\n&#125;\n如果想要了解更多，可以查看VS Code官方网站进行更深⚦入的学习。\nPython编程流程那么，我们如何使用VS Code进行python编程呢？我们通过一个简单的helloworld程序进行示例\n\n\n按下Ctrl+N，新建一个文件；\n按下Ctrl+S，将文件命名为helloworld.py，并保存在helloworld目录下（如果你settings.json中已经配置过&quot;files.defaultLanguage&quot;: &quot;python&quot;，则输入文件名的时候可以省略扩展名（.py）；\n在helloworld.py中键入：print('helloworld')\nCtrl+S保存，在终端中输入：python helloworld.py\n然后就可以在终端中看到程序的输出：helloworld\n\n\n\n自动补全vscode自动补全是十分强大的，它包括了：\n\n括号(包括() [] &#123;&#125;等)\n变量名补全\n关键字补全\n结构补全\n\n下面通过一个求阶乘的简单例程举例说明如何使用自动补全。\n\n\n首先，你非常普通的定义了一个供用户输入的变量\n\nnumber = int(input('please input the numberヾ(≧▽≦*)o: '))\n\n然后，我们在上面定义一个普通的函数，用来计算阶乘；这时，你\n\n\n敲下了DEF\n\n 然后，奇迹发生了！3. 紧随你的def后面，出现了一个黑框框，不知是谁悄咪咪的告诉了你：\n\n按下Tab吧，靓仔！\n\n 你惊奇的发现，一个完整的函数结构出现了！ 4. 你发现函数名称funcname已经被选中了，所以你\n\n直接输入了变量名factoriol，按下Tab跳转到parameter_list的同时选中了它，你顺手写上了参数num你就这样通过Tab快速切换，敲好了一个函数的雏形\n\n5. 之后，你\n\n删掉了pass\n\n 这个无用的家伙\n\n写下了sum = 1for\n\n 这时，奇迹又一次降临了！ 6. 你敏锐的察觉到如下对应关系：\n\n\n\n\nIcon\nMeaning\n\n\n\n\n系统关键字\n\n\n\n结构\n\n\n\n函数\n\n\n\n类\n\n\n\n变量\n\n\n\n 所以你\n\n按下了↓，选择了第二个，然后按下了Tab\n\n 不出所料，出现了跟def补全类似的结构 \n\n有了上一次的经验，你\n\n\n迅速的完成了for循环\nfor i in range(1, num + 1):\n    ans *= i\n 然后写下ret\n\n 这时你已经对自动补全见怪不怪，熟练地按下tab，完成了\n\nreuturn sum\n\n\n你已经对VS Code的自动补全基本熟悉了，优雅的敲完了整段程序：\n\n\ndef factoriol(num):\n    \"\"\"\n    this is a smple function, and I'm a docstring.\n    \"\"\"\n    ans = 1\n    for i in range(1, num + 1):\n        ans *= i\n    return ans\n\n\nnumber = int(input('please input the numberヾ(≧▽≦*)o: '))\nprint(f'the result is &#123;factoriol(number)&#125;')\n\n\n总结\n回顾这个简单的小程序，你会发现：通过几个简单的Tab，你在这短短12行程序中至少少敲击了25次键盘！不难想象，将来在稍微复杂一点的程序中，VS Code的自动补全可以帮你简单的完成：\n\n重复的变量调用；\n重复的for循环等结构；\n重复的函数调用；\n\n甚至有的时候，它还能起到指导你的作用 （比如在刚刚的例程中你第一次知道了还有函数说明——docstring这种东西的存在）因此，熟练的掌握VS Code的使用，无疑会使得你编程速度和水平一点点稳步提高，甚至会让你爱上编程。（个人建议还是别爱上编程了，容易变成单身的技术死宅。当然，小姐姐除外(～￣▽￣)～）\n快捷键快捷键是让人爱不释手的基本工具，有了它，你在编程是甚至不需要鼠标，就能随心所欲的操作代码。下面列出一些我常用的快捷键\n\n\n\n快捷键\n功能\n\n\n\nF2\n重命名\n\n\nF11\n全屏\n\n\nCtrl+C\n复制当前行/选中内容\n\n\nCtrl+V\n黏贴当前行/选中内容\n\n\nCtrl+F\n查找\n\n\nCtrl+H\n替换\n\n\nCtrl+Z\n撤销\n\n\nCtrl+Y\n重做\n\n\nCtrl+D\n选中当前半高亮内容（多次点击可选中下一个匹配的半高亮内容）\n\n\nCtrl+N\n新建文件\n\n\nCtrl+Shift+N\n打开新的VS Code编辑器窗口\n\n\nCtrl+W\n关闭当前页面\n\n\nCtrl+Shift+W\n关闭当前窗口\n\n\nCtrl+&#91;/&#93;\n代码向左/右缩进\n\n\nAlt+↓/↑\n向上/下移动当前行\n\n\nShift+Alt+↓/↑\n向上/下复制当前行\n\n\nCtrl+Enter\n在当前行下方插入一行\n\n\nCtrl+Shift+Enter\n在当前行上方插入一行\n\n\nShift+Alt+鼠标左键Ctrl+Shift+↓/↑\n多行编辑\n\n\n这些只是一小部分VS Code的快捷键，仅代表我个人经常使用的快捷键。若想了解更多快捷键，请按下Ctrl+K,Ctrl+R下载官方pdf查看。另外，不是所有的快捷键都必须掌握，快捷键只是为了提升我们的编码效率，提升编码体验的，用多少快捷键，用什么快捷键，完全取决于个人喜好。\n插件推荐上文提到，vscode的插件功能是及其强大的，它可以实现许多提升编程体验的功能。下面是我认为比较舒服的插件。安装方法参考上文python插件的安装方法。我要是说我懒得配图了会不会挨打QAQ\n外观One Dark Provscode的外观是由主题插件自定义的，这个插件就可以让你的VS Code外观变得与众不同\nBracket Pair Colorize 2这是嵌套括号彩色插件，它使得不同层级的嵌套括号以不同的颜色显示，能轻易地让你分清括号间的层级关系。\nChinese (Simplified) Language Pack for Visual Studio Code这个就不用多说了吧，懂得都懂(づ￣ 3￣)づ。\nindent-rainbow该插件能将不同层级的缩进 （敲一下Tab就有啦） 用彩色标示出来，这对于python这种用缩进确定代码层级关系的语言尤为有用。\n实用Pylance这是微软出品的python语言服务器，能增强python的自动补全功能，还有许多我们用不到的高级功能 （笑\nCode Runner这是一款允许你运行部分代码的插件，选中你想运行的代码之后右键单击，第一个选项 Run Code 就是啦。你也可以通过快捷键Ctrl+Alt+N快速执行。\n总结本文档看起来像是一片巨细无遗的指导文档，然而实际上却是我自己用来复习和学习的一个笔记。我的技术性文档才刚刚起步，不足之处还请多包含。VS Code这款编辑器足够强大，扩展性足够高，这一特性使得她成为了我的唯一编辑器。不论是python、C、C++、HTML/CSS/JS，还是Arduino、markdown、$\\LaTeX$，我都会用这款编辑器来进行编写。因此，我只需要学习这一款编辑器的用法，就可以处理大部分的编程任务，这无疑大大减少了我的多语言学习成本。甚至本文档都是在VS Code内用markdown编写的。另外，对于编程能力的提升，我认为最好的方法就是————实践。无论是什么语言，能够快速提升代码能力的唯一方式就是实践。在实践中，才会发现一系列实际问题，才会四处搜寻资料或者询问他人，才能一步步成长。本文档介绍的VS Code使用方法只是冰山一角，许多目前我们暂时用不到、而十分重要的功能我都没有进行介绍。（例如调试相关操作）这款强大的开发工具还有更多实用的功能等待你的探索。\n","categories":["tools"],"tags":["python","vscode"]},{"title":"SQLite 使用入门","url":"https://blog.ccandle.top/2021/02/17/sqlite/","content":"什么是SQLite？ SQLite是世界上使用最广泛的轻量化SQL数据库引擎。它支持标准的SQL语言，对我们入门SQL十分友好\nSQLite的安装\n首先，访问SQLite网页，下载Precompiled Binaries for Windows（为Windows预编译的二进制文件） 中如下两个文件。（或者点击如下两个链接直接下载。）\nsqlite-dll-win64-x64-3330000.zip\nsqlite-tools-win32-x86-3330000.zip\n\n\n然后，在你喜欢的位置建立一个名为sqlite的文件夹（这里以C:\\sqlite为例），然后将刚刚下载的两个压缩包解压到这个位置。\n手动将该文件夹路径添加到PATH环境变量中（具体方法见文末）。\n打开cmd，输入sqlite3\n  如果返回了以下结果：  SQLite version 3.33.0 2020-08-14 13:23:32\nEnter &quot;.help&quot; for usage hints.\nConnected to a transient in-memory database.\nUse &quot;.open FILENAME&quot; to reopen on a persistent database.\nsqlite&gt;\n  则说明安装成功。  如果返回：  &#39;sqlite3&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。\n  则需要对照上述步骤重新检查安装是否完成。\n\nSQLite命令SQLite命令是指以.开头，结尾不需要;的指令语句，通常称为“点命令”。在使用点命令之前，你需要在cmd中输入sqlite3来进入SQLite命令提示符。\n基础操作\n\n\n点命令\n作用\n\n\n\n.help\n显示所有的点命令\n\n\n.database\n列出数据库的名称及其依附的文件\n\n\n.table\n列出数据库中的表\n\n\n.exit/.quit\n退出SQLite命令提示符\n\n\n格式化输出格式化输出可以允许语句的输出结果更有可读性\n\n\n\n点命令\n作用\n\n\n\n.header on\n打开表头\n\n\n.mode MODE\n设置输出模式；我们通常使用.mode column使其按列输出<!-- MODE可以取下列值:`csv` 逗号分隔的值`column` 左对齐的列`html` HTML 的 \\ 代码`insert` TABLE 表的 SQL 插入（insert）语句`line` 每行一个值`list` 由 .separator 字符串分隔的值`tabs` 由 Tab 分隔的值`tcl` TCL 列表元素-->\n\n\n.width\n在.mode column模式下设定每一列的宽度\n\n\nSQLite语法 SQLite支持标准的SQL语法。 篇幅所限，本文不再详细介绍SQL语法，请移步菜鸟教程进行学习。\n<!--  这里给出SQL语法表，以供查阅。\n *在cmd中输入`sqlite3 sample.db`以创建一个数据库*\n|语句|作用|举例|\n|:--|--|--|\n|CREATE TABLE TABLE_NAME(NAME_1 DATATYPE [PRIMARY KEY] [NOT NULL],NAME_2 DATATYPE [PRIMARY KEY] [NOT NULL],······NAME_n DATATYPE [PRIMARY KEY] [NOT NULL])|创建名为`TABLE_NAME`的新表，其属性分别为：`NAME_1`、`NAME_2`···`NAME_n`这里的两个可选属性分别是*是否为关键字*以及*是否可以为空*|create table [if not exists] class|\n|INSERT INTO TABLE_NAME ||| -->\nSQLite &amp; Python SQLite可以通过python进行调用。 下面我们通过一则例程了解如何用python实现:\n\n创建/连接数据库\n创建数据表\n插入数据\n删除数据\n查询数据\n更新数据import sqlite3\ndef output(list):\n    \"\"\"\n    print the output\n    \"\"\"\n    for i in list:\n        for j in i:\n            print(j, end='\\t')\n        print('')\n    print('##############################################')\n    return\n##############################  CREATE  ##############################\ntestdb = sqlite3.connect(\"./database/sample.db\")    # create a database if not exists\ncur = testdb.cursor()                                       # create a cursor to execute the command  \ncur.execute(\"create table if not exists student (\\\n    ID int primary key not null,\\\n    Name text not null,\\\n    Gender check(Gender = \\\"女\\\" or Gender = \\\"男\\\"),\\\n    Age int NOT NULL,\\\n    Major text not null\\\n    );\")                                                    # create a data base\nprint('~~~~~~~~~~~~~~~~~CREATE done~~~~~~~~~~~~~~~~~')\n##############################  INSERT  ##############################\ncur.execute(\"delete from student\")\ncur.execute(\"insert into student values (20160932, \\\"于在\\\", \\\"男\\\", 18, \\\"自动化\\\");\")\ncur.execute(\"insert into student values (20171001, \\\"丛仪\\\", \\\"女\\\", 18, \\\"医学\\\"  );\")\ncur.execute(\"insert into student values (20180229, \\\"杨阳\\\", \\\"男\\\", 23, \\\"计算机\\\");\")\ncur.execute(\"insert into student values (20171033, \\\"张宁\\\", \\\"男\\\", 20, \\\"数学\\\"  );\")\ncur.execute(\"insert into student values (20201126, \\\"李锦\\\", \\\"女\\\", 18, \\\"能制\\\"  );\")\ncur.execute(\"insert into student values (20201302, \\\"王渠\\\", \\\"女\\\", 17, \\\"文学\\\"  );\")\ncur.execute(\"insert into student values (20020822, \\\"费武\\\", \\\"男\\\", 18, \\\"家里蹲\\\");\")\ncur.execute(\"insert into student values (20010822, \\\"蔡构\\\", \\\"男\\\", 19, \\\"家里蹲\\\");\")\ncur.execute(\"insert into student values (20028022, \\\"拉吉\\\", \\\"男\\\", 12, \\\"家里蹲\\\");\")\ntestdb.commit()\nprint('~~~~~~~~~~~~~~~~~INSERT done~~~~~~~~~~~~~~~~~')\n\n##############################  DELETE  ##############################\ncur.execute(\"delete from student where Name = \\\"蔡构\\\";\")\ntestdb.commit()\nprint('~~~~~~~~~~~~~~~~~DELETE done~~~~~~~~~~~~~~~~~')\n\n##############################  SELECT  ##############################\nlist = cur.execute(\"select * from student;\");                                                   output(list)\nlist = cur.execute(\"select Name, Age from student where Major = \\\"医学\\\";\");                    output(list)\nlist = cur.execute(\"select distinct Major from student;\");                                      output(list)\nlist = cur.execute(\"select ID, Name from student where Age>19;\");                               output(list)\nlist = cur.execute(\"select ID, Name, Age from student where Age&lt;=18 order by age desc;\");       output(list)\nlist = cur.execute(\"select ID, Name from student where Major = \\\"家里蹲\\\" order by age desc;\"); output(list)\nlist = cur.execute(\"select count(*) from student;\");                                            output(list)\nlist = cur.execute(\"select avg(age) from student;\");                                            output(list)\nlist = cur.execute(\"select max(age),min(age),max(age)-min(age) from student;\");                 output(list)\nprint('~~~~~~~~~~~~~~~~~SELECT done~~~~~~~~~~~~~~~~~')\n\n##############################  UPDATE  ##############################\ncur.execute(\"update student set age = 13 where name = \\\"拉吉\\\";\")\nlist = cur.execute(\"select * from student where name = \\\"拉吉\\\";\");                             output(list)\nprint('~~~~~~~~~~~~~~~~~UPDATE done~~~~~~~~~~~~~~~~~')\n\n##############################  SAVE&amp;EXIT  ##############################\ncur.close()\ntestdb.commit()\ntestdb.close()\nprint('~~~~~~~~~~~~~~~~SAVE&amp;EXIT done~~~~~~~~~~~~~~~~')\n输出结果：~~~~~~~~~~~~~~~~~CREATE done~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~INSERT done~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~DELETE done~~~~~~~~~~~~~~~~~\n20160932        于在    男      18      自动化\n20171001        丛仪    女      18      医学\n20180229        杨阳    男      23      计算机\n20171033        张宁    男      20      数学\n20201126        李锦    女      18      能制\n20201302        王渠    女      17      文学\n20020822        费武    男      18      家里蹲\n20028022        拉吉    男      12      家里蹲\n##############################################\n丛仪    18\n##############################################\n自动化\n医学\n计算机\n数学\n能制\n文学\n家里蹲\n##############################################\n20180229        杨阳\n20171033        张宁\n##############################################\n20160932        于在    18\n20171001        丛仪    18\n20201126        李锦    18\n20020822        费武    18\n20201302        王渠    17\n20028022        拉吉    12\n##############################################\n20020822        费武\n20028022        拉吉\n##############################################\n8\n##############################################\n18.0\n##############################################\n23      12      11\n##############################################\n~~~~~~~~~~~~~~~~~SELECT done~~~~~~~~~~~~~~~~~\n20028022        拉吉    男      13      家里蹲\n##############################################\n~~~~~~~~~~~~~~~~~UPDATE done~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~SAVE&amp;EXIT done~~~~~~~~~~~~~~~~\n手动添加到PATH详细步骤\n\n\n\n打开Windows资源管理器，右键单击此电脑，选择属性；\n按照图示顺序操作，新建PATH环境变量；\n\n\n选择高级系统设置\n点击环境变量\n选中PATH\n点击编辑\n点击新建\n\n\n确认路径无误后，点击三个确定一路返回，否则添加路径将会失败！\n\n\n","categories":["python"],"tags":["python","SQL","SQLite"]},{"title":"pip 使用入门","url":"https://blog.ccandle.top/2021/02/17/pip/","content":"介绍pip是python自带的包管理工具，它实现了对Python第三方包的管理功能。\n安装一般来说，如果你在python中下载了python的最新版本（python3.4+），则已经自带了该工具。\n检测在 cmd 中输入\n pip -V\n\n如果返回了   pip 20.2.4 from ···s\n\n\n\n则说明安装成功；  \n\n如果返回了  &#39;pip&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。\n\n\n\n则说明在安装python的时候没有选中 Add python3.x to path 属性，建议重新进行python的安装，或者可以通过命令行单独安装pip。\n1. python的重新安装这是比较推荐的方法，还可以更新电脑上的python  \n\n首先，点击这里下载python3.9的安装包。\n在第一个界面，点击界面下方Add Python 3.9 to PATH\n\n\n\n然后点击Install Now\n\n\n此处不建议修改默认安装路径4. 之后就可以愉快的无脑下一步啦~5. 最后，打开cmd检测pip是否安装完成就可以了\n2. 通过命令行单独安装pip此过程比较简单方便，对命令行命令有兴趣的同学可以自行搜索了解相关命令的作用\n\nWin + R打开运行窗口，输入cmd打开终端\n\n在cmd中输入  \ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n下载完成后，继续输入  \npython get-pip.py\n完成并检测后就可以愉快的使用pip啦~\n\n\n使用目前，我们最需要用到的pip命令只有一个： pip install SomePackage即用pip自动安装python第三方包。\n\n举个栗子：  \npip install pygame\n就可以安装python一个简单的小游戏制作工具包 pygame  \n\n可能用到的命令\n\n pip install SomePackage                 //安装指定包\n pip uninstall SomePackage               //卸载指定包\n pip --version                           //查看pip版本\n pip --help                              //获取pip帮助\n python -m pip install --upgrade pip     //升级pip\n pip list                                //列出已安装的包\n pip list -o                             //列出可升级的包\n pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n//将pip镜像源改为清华，能够提升包下载速度\n\n\n\n\n\n","categories":["python"],"tags":["python","pip"]},{"title":"Hello World","url":"https://blog.ccandle.top/2021/02/17/hello-hexo/","content":"本Blog网站基于    - github    - hexo    - hexo-theme-kaze搭建\nHello World!这是我，CC&amp;&amp;le，第一次搭建自己的个人Blog。感谢开源社区为我等小白搭建个人Blog提供的便利(￣︶￣*))\n特别致谢特别感谢画师大大洛宁对本站的支持(づ￣ 3￣)づ我的个人头像以及LOGO均出自洛宁大大之手，有需要可以联系她哦~\n","categories":[],"tags":[]}]